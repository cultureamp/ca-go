package apierrors

import (
	"encoding/json"
	"net/http"
)

type Config func(*ErrorInstance)

// Response is a JSON::API compatible error response for use by consuming
// services. See https://jsonapi.org/format/#errors for more information.
type Response struct {
	// The set of JSON:API errors to return. This will usually be a single
	// error, but may be multiple.
	Errors []ErrorInstance `json:"errors"`

	// Allows middleware to determine a status code to return. The use of this
	// value is dependent on the implementation environment: Goa will make use
	// of it via the goahttp.Statuser interface.
	Status int `json:"-"`
}

// AddError returns a new Response with the specified error included. Only the
// title field is set; to set others, use the Add function.
func (r Response) AddError(title string) Response {
	return r.Add(ErrorInstance{
		Title: title,
	})
}

func (r Response) Add(ei ErrorInstance) Response {
	r.Errors = append(r.Errors, ei)

	return r
}

// StatusCode allows this response to be used as a goahttp.Statuser, and
// provides the ability for generalised response handling to modify the HTTP
// status code.
func (r Response) StatusCode() int {
	if r.Status == 0 {
		return http.StatusInternalServerError
	}

	return r.Status
}

func (r Response) Serialize() ([]byte, error) {
	return json.Marshal(r)
}

func (r Response) MustSerialize() []byte {
	s, err := r.Serialize()
	if err != nil {
		// https://stackoverflow.com/questions/33903552/what-input-will-cause-golangs-json-marshal-to-return-an-error#:~:text=From%20the%20docs%3A,result%20in%20an%20infinite%20recursion.
		// Should not happen with a valid ErrorResponse, but it's up to the caller to make the choice.
		panic(err)
	}

	return s
}

// ErrorInstance is used to define fields on response body types. Avoid security
// issues by ensuring that raw application errors are not directly added to the
// detail this returns.
type ErrorInstance struct {
	// A a short, human-readable name for the class of errors.
	Title string `json:"title"`
	// A human-readable explanation specific to this occurrence of the problem.
	// Do not include details from errors generated by the application: this
	// often leads to security issues.
	Detail *string `json:"detail,omitempty"`
	// A unique identifier for this particular occurrence of the problem
	ID *string `json:"id,omitempty"`
	// Service-specific error code, expressed as a string
	Code *string `json:"code,omitempty"`
}

// NewUnexpectedErrorResponse returns a JSON API error response for
// an unexpected error, with ID set to errorId.
func NewUnexpectedError(errorId *string) Response {
	return Response{
		Errors: []ErrorInstance{
			{
				Title: "Unexpected error",
				ID:    errorId,
			},
		},
	}
}
