// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cultureamp/ca-go/x/kafka/consumer (interfaces: Reader)

// Package consumer is a generated GoMock package.
package consumer

import (
	reflect "reflect"
	time "time"

	kafka "github.com/confluentinc/confluent-kafka-go/v2/kafka"
	gomock "github.com/golang/mock/gomock"
)

// MockReader is a mock of Reader interface.
type MockReader struct {
	ctrl     *gomock.Controller
	recorder *MockReaderMockRecorder
}

// MockReaderMockRecorder is the mock recorder for MockReader.
type MockReaderMockRecorder struct {
	mock *MockReader
}

// NewMockReader creates a new mock instance.
func NewMockReader(ctrl *gomock.Controller) *MockReader {
	mock := &MockReader{ctrl: ctrl}
	mock.recorder = &MockReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReader) EXPECT() *MockReaderMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockReader) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockReaderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockReader)(nil).Close))
}

// CommitMessage mocks base method.
func (m *MockReader) CommitMessage(arg0 *kafka.Message) ([]kafka.TopicPartition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitMessage", arg0)
	ret0, _ := ret[0].([]kafka.TopicPartition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitMessage indicates an expected call of CommitMessage.
func (mr *MockReaderMockRecorder) CommitMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitMessage", reflect.TypeOf((*MockReader)(nil).CommitMessage), arg0)
}

// ReadMessage mocks base method.
func (m *MockReader) ReadMessage(arg0 time.Duration) (*kafka.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMessage", arg0)
	ret0, _ := ret[0].(*kafka.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadMessage indicates an expected call of ReadMessage.
func (mr *MockReaderMockRecorder) ReadMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMessage", reflect.TypeOf((*MockReader)(nil).ReadMessage), arg0)
}
